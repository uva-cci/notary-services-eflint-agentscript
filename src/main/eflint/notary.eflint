Fact notary
Fact citizen 
Fact address 
Fact municipality
Fact enforcement_service
Fact value Identified by Int
Fact property Identified by address * value
Fact mortgage Identified by citizen * property
Fact nim_covered Identified by mortgage
Fact occupant Identified by citizen * property

Fact sum_property_value Identified by Int
  Derived from Sum(Foreach property : property.value)

Fact property_count Identified by Int
  Derived from Count(Foreach property : property)

Open Fact first_property Identified by citizen * property

Fact property_mean_value Identified by Int
  Derived from sum_property_value/property_count When property_count != 0

Fact owned_property Identified by property
  Holds when mortgage(citizen, property)

Fact article_one
  Identified by citizen * property
  Holds when first_property(citizen, property)

Fact article_two
  Identified by property
  Holds when property.value <= property_mean_value

Fact article_three
  Identified by citizen * property
  Holds when occupant(citizen, property) && mortgage(citizen, property)

Act issue_nim
  Actor notary
  Recipient citizen
  Related to mortgage, property
  Conditioned by article_one() && article_two()
  Creates nim_covered(mortgage)
  Terminates duty_issue_nim()
  Holds when !nim_covered(mortgage)
    && mortgage.citizen == citizen
    && mortgage.property == property



Duty duty_issue_nim
  Holder notary
  Claimant citizen
  Related to mortgage, property
  Holds when issue_nim()

Act register_occupant
  Actor municipality
  Recipient citizen
  Related to property
  Conditioned by owned_property(property) && !occupant()
  Creates occupant()
  Terminates (Foreach occupant : occupant When occupant.citizen == citizen && occupant.property != property)
  Holds when property
.


//+notary(Notary).
//+citizen(Alice). +citizen(Bob). +citizen(Chloe).
//+municipality(Amsterdam).
//+enforcement_service(Enforcer).
//+property(A1,3).
//+property(B1,2).
//+mortgage(Alice, property(A1,3)).
//+occupant(Alice, property(A1,3)).
//+occupant(Bob, property(B1,2)).
//+mortgage(Bob, property(B1,2)).

//+first_property(citizen("Alice"),property(address("A1"),value(3))). // provide external input
//+first_property(citizen("Bob"),property(address("B1"),value(2))).   // provide external input

//issue_nim(Notary, Bob, mortgage(Bob, property(B1,2)), property(B1,2)).

//Extend Fact article_one Conditioned by article_three().

//Fact undue_cancel_nim Identified by citizen * mortgage.

//Duty duty_to_cancel_nim Holder citizen Claimant notary  Related to mortgage, occupant    When citizen == mortgage.citizen && citizen == occupant.citizen  Violated when undue_cancel_nim()  Holds when nim_covered(mortgage) && mortgage.property != occupant.property

//Event cancel_nim_delay  Related to citizen, mortgage  Creates undue_cancel_nim() When duty_to_cancel_nim().

